#ifndef CROSSFADE3_LIB
static int32_t crossfade3_raw[441] = {
    65536, 65387, 65238, 65089, 64940, 64791, 64642, 64493, 64344, 64195, 64046,
    63897, 63748, 63599, 63450, 63301, 63152, 63003, 62854, 62706, 62557, 62408,
    62259, 62110, 61961, 61812, 61663, 61514, 61365, 61216, 61067, 60918, 60769,
    60620, 60471, 60322, 60173, 60025, 59876, 59727, 59578, 59429, 59280, 59131,
    58982, 58833, 58684, 58535, 58386, 58237, 58088, 57939, 57790, 57641, 57492,
    57344, 57195, 57046, 56897, 56748, 56599, 56450, 56301, 56152, 56003, 55854,
    55705, 55556, 55407, 55258, 55109, 54960, 54811, 54662, 54514, 54365, 54216,
    54067, 53918, 53769, 53620, 53471, 53322, 53173, 53024, 52875, 52726, 52577,
    52428, 52279, 52130, 51981, 51833, 51684, 51535, 51386, 51237, 51088, 50939,
    50790, 50641, 50492, 50343, 50194, 50045, 49896, 49747, 49598, 49449, 49300,
    49152, 49003, 48854, 48705, 48556, 48407, 48258, 48109, 47960, 47811, 47662,
    47513, 47364, 47215, 47066, 46917, 46768, 46619, 46470, 46322, 46173, 46024,
    45875, 45726, 45577, 45428, 45279, 45130, 44981, 44832, 44683, 44534, 44385,
    44236, 44087, 43938, 43789, 43641, 43492, 43343, 43194, 43045, 42896, 42747,
    42598, 42449, 42300, 42151, 42002, 41853, 41704, 41555, 41406, 41257, 41108,
    40960, 40811, 40662, 40513, 40364, 40215, 40066, 39917, 39768, 39619, 39470,
    39321, 39172, 39023, 38874, 38725, 38576, 38427, 38278, 38130, 37981, 37832,
    37683, 37534, 37385, 37236, 37087, 36938, 36789, 36640, 36491, 36342, 36193,
    36044, 35895, 35746, 35597, 35449, 35300, 35151, 35002, 34853, 34704, 34555,
    34406, 34257, 34108, 33959, 33810, 33661, 33512, 33363, 33214, 33065, 32916,
    32768, 32619, 32470, 32321, 32172, 32023, 31874, 31725, 31576, 31427, 31278,
    31129, 30980, 30831, 30682, 30533, 30384, 30235, 30086, 29938, 29789, 29640,
    29491, 29342, 29193, 29044, 28895, 28746, 28597, 28448, 28299, 28150, 28001,
    27852, 27703, 27554, 27405, 27257, 27108, 26959, 26810, 26661, 26512, 26363,
    26214, 26065, 25916, 25767, 25618, 25469, 25320, 25171, 25022, 24873, 24724,
    24576, 24427, 24278, 24129, 23980, 23831, 23682, 23533, 23384, 23235, 23086,
    22937, 22788, 22639, 22490, 22341, 22192, 22043, 21894, 21746, 21597, 21448,
    21299, 21150, 21001, 20852, 20703, 20554, 20405, 20256, 20107, 19958, 19809,
    19660, 19511, 19362, 19213, 19065, 18916, 18767, 18618, 18469, 18320, 18171,
    18022, 17873, 17724, 17575, 17426, 17277, 17128, 16979, 16830, 16681, 16532,
    16384, 16235, 16086, 15937, 15788, 15639, 15490, 15341, 15192, 15043, 14894,
    14745, 14596, 14447, 14298, 14149, 14000, 13851, 13702, 13554, 13405, 13256,
    13107, 12958, 12809, 12660, 12511, 12362, 12213, 12064, 11915, 11766, 11617,
    11468, 11319, 11170, 11021, 10873, 10724, 10575, 10426, 10277, 10128, 9979,
    9830,  9681,  9532,  9383,  9234,  9085,  8936,  8787,  8638,  8489,  8340,
    8192,  8043,  7894,  7745,  7596,  7447,  7298,  7149,  7000,  6851,  6702,
    6553,  6404,  6255,  6106,  5957,  5808,  5659,  5510,  5362,  5213,  5064,
    4915,  4766,  4617,  4468,  4319,  4170,  4021,  3872,  3723,  3574,  3425,
    3276,  3127,  2978,  2829,  2681,  2532,  2383,  2234,  2085,  1936,  1787,
    1638,  1489,  1340,  1191,  1042,  893,   744,   595,   446,   297,   148,
    0,
};

#define CROSSFADE_Q_BITS 16
#define CROSSFADE_FRACTIONAL_BITS (1 << CROSSFADE_Q_BITS)

// Function to convert Q8.10 fixed-point to int16_t
int16_t crossfade3_fixedPointToInt16(int32_t fixedValue) {
  return (int16_t)(fixedValue >> CROSSFADE_Q_BITS);
}

// Function to convert a Q8.10 fixed-point value to a float
float crossfade3_fixedPointToFloat(int32_t value) {
  return (float)value / CROSSFADE_FRACTIONAL_BITS;
}

int32_t crossfade3_floatToFixedPoint(float value) {
  return (int32_t)(value * CROSSFADE_FRACTIONAL_BITS);
}

// Function to convert int16_t to Q8.10 fixed-point
int32_t crossfade3_int16ToFixedPoint(int16_t value) {
  return (int32_t)value << CROSSFADE_Q_BITS;
}

int32_t crossfade3_multiplyFixedPoint(int32_t a, int32_t b) {
  return (int32_t)(((int64_t)a * b) >> CROSSFADE_Q_BITS);
}

int16_t crossfade3_out(int16_t val, uint16_t i) {
  int32_t mult = crossfade3_multiplyFixedPoint(
      crossfade3_int16ToFixedPoint(val), crossfade3_raw[i]);
  return crossfade3_fixedPointToInt16(mult);
}

int16_t crossfade3_in(int16_t val, uint16_t i) {
  int32_t mult = crossfade3_multiplyFixedPoint(
      crossfade3_int16ToFixedPoint(val), 65536 - crossfade3_raw[i]);
  return crossfade3_fixedPointToInt16(mult);
}

#define CROSSFADE3_LIB 1
#endif
